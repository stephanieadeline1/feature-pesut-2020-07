{"version":3,"sources":["webpack:///./app/scripts/utils/load-script.js","webpack:///./app/scripts/utils/select-all.js","webpack:///./app/scripts/utils/unique-id.js","webpack:///./app/scripts/utils/ad-loader.js","webpack:///./app/scripts/utils/get-matching-attributes.js","webpack:///./app/scripts/utils/get-attributes.js","webpack:///./app/scripts/utils/camel-case.js"],"names":["loadScript","url","Promise","resolve","reject","script","document","createElement","src","async","onload","onerror","body","appendChild","selectAll","el","context","Node","Window","Array","prototype","slice","call","querySelectorAll","idCounter","AdLoader","constructor","adFields","adUnit","dimensions","globalMappings","banner","attributePrefix","gptSrc","idPrefix","selector","targetingKey","targetingValue","this","initialized","slots","createAds","bind","onIntersection","setupService","init","elements","count","length","observer","IntersectionObserver","rootMargin","threshold","window","googletag","cmd","then","push","pubads","setTargeting","disableInitialLoad","enableServices","forEach","element","prefix","id","matchingAttributes","attributes","attrs","nodeType","map","i","name","value","getAttributes","fields","Object","keys","key","substr","field","replace","match","p1","toUpperCase","getMatchingAttributes","options","assign","adElementId","setAttribute","gptAdUnit","defineSlot","defineSizeMapping","setCollapseEmptyDiv","addService","display","__slot__","observe","entries","entry","isIntersecting","target","unobserve","refresh","disconnect"],"mappings":"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","file":"ads.f652939abc.mjs","sourcesContent":["/**\n * A helper for asynchronously loading scripts.\n *\n * Provides a Promise interface for passing a function that will only be called\n * if the script is successfully added to the page.\n *\n * @private\n * @param {String} url The URL for the script to be loaded.\n * @returns {Promise}\n * @example\n *\n * loadScript('backup.js').then(() => {\n *   // anything that depends on that script loading\n * });\n */\nfunction loadScript(url) {\n  return new Promise((resolve, reject) => {\n    // create the `script` element\n    const script = document.createElement('script');\n\n    // set its URL\n    script.src = url;\n\n    // should always be async\n    script.async = true;\n\n    // resolve the Promise on load\n    script.onload = resolve;\n\n    // reject the Promise if there is an error\n    script.onerror = reject;\n\n    // attach the script to the document body\n    document.body.appendChild(script);\n  });\n}\n\nexport default loadScript;\n","/* global Node, Window */\n\n/**\n * Select all matching elements on the page. Uses `document.querySelectorAll`.\n *\n * @param {String} el The CSS selector to search for.\n * @param {Element} [context] The container to search within. Defaults to\n * `document`.\n * @returns {Element[]}\n */\nfunction selectAll(el, context) {\n  // if `el` is a Node or Window, return it in an Array\n  if (el instanceof Node || el instanceof Window) return [el];\n\n  return Array.prototype.slice.call(\n    typeof el === 'string'\n      ? (context || document).querySelectorAll(el)\n      : el || []\n  );\n}\n\nexport default selectAll;\n","/**\n * Counter used by {uniqueId} to iterate.\n * @private\n * @type {Number}\n */\nlet idCounter = 0;\n\n/**\n * Generates identifiers unique to a single browser session. Each time it runs,\n * the integer at the end of the return value will increment.\n *\n * Borrowed from underscore.js: http://underscorejs.org/#uniqueId\n *\n * @param  {String} [prefix] Optional prefix for identifier\n * @return {String}\n * @example\n *\n * var identifier = uniqueId();\n * // returns '1'\n *\n * var prefixedIdentifier = uniqueId('label-');\n * // returns 'label-2'\n */\nexport default function uniqueId(prefix) {\n  const id = ++idCounter + '';\n  return prefix ? prefix + id : id;\n}\n","import getMatchingAttributes from './get-matching-attributes';\nimport loadScript from './load-script';\nimport selectAll from './select-all';\nimport uniqueId from './unique-id';\n\nclass AdLoader {\n  constructor({\n    adFields = { adUnit: '/5805113/basic', dimensions: [300, 250] },\n    globalMappings = {\n      banner: [[[768, 130], [[728, 90]]]],\n    },\n    attributePrefix = 'dv-gpt-',\n    gptSrc = 'https://www.googletagservices.com/tag/js/gpt.js',\n    idPrefix = 'dv-gpt-',\n    selector = '.dv-gpt-ad',\n    targetingKey = 'tribpedia',\n    targetingValue,\n  } = {}) {\n    this.adFields = adFields;\n    this.globalMappings = globalMappings;\n    this.attributePrefix = attributePrefix;\n    this.gptSrc = gptSrc;\n    this.idPrefix = idPrefix;\n    this.selector = selector;\n    this.targetingKey = targetingKey;\n    this.targetingValue = targetingValue;\n\n    this.initialized = false;\n    this.slots = null;\n\n    this.createAds = this.createAds.bind(this);\n    this.onIntersection = this.onIntersection.bind(this);\n    this.setupService = this.setupService.bind(this);\n  }\n\n  init() {\n    if (this.initialized) return;\n\n    this.elements = selectAll(this.selector);\n    this.count = this.elements.length;\n\n    const config = {\n      rootMargin: '500px 0px',\n      threshold: 0.01,\n    };\n\n    this.observer = new IntersectionObserver(this.onIntersection, config);\n\n    window.googletag = window.googletag || {};\n    window.googletag.cmd = window.googletag.cmd || [];\n\n    loadScript(this.gptSrc).then(() => {\n      window.googletag.cmd.push(this.setupService, this.createAds);\n\n      this.initialized = true;\n    });\n  }\n\n  setupService() {\n    window.googletag.cmd.push(() => {\n      const pubads = window.googletag.pubads();\n\n      if (this.targetingKey && this.targetingValue) {\n        pubads.setTargeting(this.targetingKey, this.targetingValue);\n      }\n\n      pubads.disableInitialLoad();\n      window.googletag.enableServices();\n    });\n  }\n\n  createAds() {\n    const { adUnit, dimensions } = this.adFields;\n    const { banner } = this.globalMappings;\n\n    this.elements.forEach(element => {\n      const matchingAttributes = getMatchingAttributes(\n        element,\n        this.attributePrefix\n      );\n\n      const options = Object.assign(\n        {},\n        { adUnit, dimensions },\n        matchingAttributes\n      );\n\n      const adElementId = uniqueId(this.idPrefix);\n      element.setAttribute('id', adElementId);\n\n      const gptAdUnit = window.googletag.defineSlot(\n        options.adUnit,\n        options.dimensions,\n        adElementId\n      );\n\n      gptAdUnit.defineSizeMapping(banner);\n\n      if (options.targetingKey && options.targetingValue) {\n        gptAdUnit.setTargeting(options.targetingKey, options.targetingValue);\n      }\n\n      gptAdUnit.setCollapseEmptyDiv(true);\n      gptAdUnit.addService(window.googletag.pubads());\n\n      window.googletag.display(adElementId);\n      element.__slot__ = gptAdUnit;\n\n      this.observer.observe(element);\n    });\n  }\n\n  onIntersection(entries) {\n    entries.forEach(entry => {\n      if (!entry.isIntersecting) return;\n\n      const element = entry.target;\n\n      this.count -= 1;\n      this.observer.unobserve(element);\n      window.googletag.pubads().refresh([element.__slot__]);\n\n      if (this.count > 0) return;\n\n      this.observer.disconnect();\n    });\n  }\n}\n\nexport default AdLoader;\n","import camelCase from './camel-case';\nimport getAttributes from './get-attributes';\n\n/**\n * Searches an element's attributes and returns an Object of all the ones that\n * begin with a specified prefix. Each matching attribute name is returned\n * without the prefix, with the remainder converted to camelCase.\n *\n * @param  {Element} element\n * @param  {String} prefix\n * @return {Object}\n */\nexport default function getMatchingAttributes(element, prefix) {\n  // get all the attributes on the element\n  const attributes = getAttributes(element);\n  const fields = {};\n\n  // loop through the keys of the attributes\n  Object.keys(attributes).forEach(function(key) {\n    // continue if the key begins with supplied prefix\n    if (key.substr(0, prefix.length) === prefix) {\n      // grab the value associated with the original key\n      const value = attributes[key];\n\n      // slice off the prefix and camelCase what is left\n      const field = camelCase(key.slice(prefix.length));\n\n      fields[field] = value;\n    }\n  });\n\n  return fields;\n}\n","/**\n * Gets all the attributes set on an element, and returns them as an Object.\n *\n * @param  {Element} element\n * @return {Object}\n */\nexport default function getAttributes(element) {\n  const attrs = {};\n\n  // if element is empty, or not ELEMENT_NODE, eject\n  if (!element || element.nodeType !== 1) return attrs;\n\n  // grab all the attributes off the element\n  const map = element.attributes;\n\n  // if there are no attributes, eject\n  if (map.length === 0) return attrs;\n\n  // loop through the attributes and build the object\n  for (var i = 0; i < map.length; i++) {\n    attrs[map[i].name] = map[i].value;\n  }\n\n  return attrs;\n}\n","/**\n * Converts a string from dash or underscore separated to camelCase.\n *\n * @param  {String} str\n * @return {String}\n */\nexport default function camelCase(str) {\n  // remove any dashes or underscores in the string, and grab the following character\n  return str.replace(/[-_]+(\\w?)/g, (match, p1) => {\n    // uppercase the following letter\n    return p1.toUpperCase();\n  });\n}\n"],"sourceRoot":""}